#ifndef __Neighbors_H__
#define __Neighbors_H__

#define _USE_MATH_DEFINES
#include <iostream>
#include <vector>
#include <boost/shared_ptr.hpp>
//#include "Cell.h"

class Sublattice;
class Cell;
class AtomIterator;

//! Finds neighbors of two sublattices between distances min and max.
/*! Example:
 \code{.cpp}
 Neighbors neighborList(cell,sl_rp,sl_sp,min,max);
 AtomIterator nbrBegin = neighborList.begin();
 AtomIterator nbrEnd = neighborList.end();
 for(AtomIterator nbr=nbrBegin;nbr!=nbrEnd;++nbr)
 {
     ...
 }
 \endcode
 
*/
class Neighbors
{
public:
    //! Finds neighbors of two sublattices between distances min and max.
    //! \param cell pointer to unit cell
    //! \param sl1 pointer to first sublattice
    //! \param sl2 pointer to second sublattice
    //! \param min minimum distance considered (Angstroms)
    //! \param max maximum distance considered (Angstroms)
    // returns relative position of all neighboring atoms
    Neighbors(boost::shared_ptr<Cell>& cell, boost::shared_ptr<Sublattice>& sl1, boost::shared_ptr<Sublattice>& sl2, double min, double max);
    //! \return Returns an iterator pointing to the first element of the neighbor list
    AtomIterator begin();
    //! \return Returns an iterator pointing to the first element of the neighbor list
    AtomIterator end();
private:
    std::vector<std::vector<double> >* neighborList;    //!< Stores list of neighbors generated by getNeighbors
};
#endif // __Neighbors_H__ 
